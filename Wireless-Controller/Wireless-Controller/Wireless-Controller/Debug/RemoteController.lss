
RemoteController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000452  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018d  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000191  00000000  00000000  000008bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f3  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  78:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_init>:
#define BAUD_PRESCALLER (((F_CPU / (BAUDRATE * 16UL))) - 1)    //The formula that does all the required maths


void USART_init(void){
	
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
  80:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = ((1<<UCSZ00)|(1<<UCSZ01));
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24
  96:	08 95       	ret

00000098 <USART_send>:
}

void USART_send( unsigned char data){
	
	while(!(UCSR0A & (1<<UDRE0)));
  98:	e0 ec       	ldi	r30, 0xC0	; 192
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	90 81       	ld	r25, Z
  9e:	95 ff       	sbrs	r25, 5
  a0:	fd cf       	rjmp	.-6      	; 0x9c <USART_send+0x4>
	UDR0 = data;
  a2:	80 93 c6 00 	sts	0x00C6, r24
  a6:	08 95       	ret

000000a8 <InitADC>:


void InitADC()
{
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
  a8:	ec e7       	ldi	r30, 0x7C	; 124
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
  b2:	ea e7       	ldi	r30, 0x7A	; 122
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	87 68       	ori	r24, 0x87	; 135
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <ReadADC>:
}

uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
  be:	ec e7       	ldi	r30, 0x7C	; 124
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	90 81       	ld	r25, Z
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	89 2b       	or	r24, r25
  ca:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
  cc:	ea e7       	ldi	r30, 0x7A	; 122
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
  d6:	80 81       	ld	r24, Z
  d8:	86 fd       	sbrc	r24, 6
  da:	fd cf       	rjmp	.-6      	; 0xd6 <ReadADC+0x18>
	return ADC;
  dc:	80 91 78 00 	lds	r24, 0x0078
  e0:	90 91 79 00 	lds	r25, 0x0079
}
  e4:	08 95       	ret

000000e6 <main>:

int main(void)
{
    /* Replace with your application code */
	PIND = 0x00;
  e6:	19 b8       	out	0x09, r1	; 9
	uint8_t motor1;
	uint8_t motor2;
	uint32_t adc1;
	uint32_t adc2;
	
	InitADC();
  e8:	0e 94 54 00 	call	0xa8	; 0xa8 <InitADC>
	USART_init();
  ec:	0e 94 40 00 	call	0x80	; 0x80 <USART_init>

	
    while (1) 
    {
		if(PIND & (1<<PIND5)){
  f0:	c9 b1       	in	r28, 0x09	; 9
			laser = 1;
		} else {
			laser = 0;
		}
		adc1 = ReadADC(4)/5;//)*200)*1024;
  f2:	84 e0       	ldi	r24, 0x04	; 4
  f4:	0e 94 5f 00 	call	0xbe	; 0xbe <ReadADC>
  f8:	7c 01       	movw	r14, r24
		motor1 = adc1;
		adc2 = ReadADC(5)/5;//*200)*1024;
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	0e 94 5f 00 	call	0xbe	; 0xbe <ReadADC>
 100:	8c 01       	movw	r16, r24
		motor2 = adc2;
		USART_send('>');
 102:	8e e3       	ldi	r24, 0x3E	; 62
 104:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	8f ed       	ldi	r24, 0xDF	; 223
 10a:	9e e2       	ldi	r25, 0x2E	; 46
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <main+0x26>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x2c>
 112:	00 00       	nop
		if(PIND & (1<<PIND5)){
			laser = 1;
		} else {
			laser = 0;
		}
		adc1 = ReadADC(4)/5;//)*200)*1024;
 114:	97 01       	movw	r18, r14
 116:	ad ec       	ldi	r26, 0xCD	; 205
 118:	bc ec       	ldi	r27, 0xCC	; 204
 11a:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__umulhisi3>
 11e:	96 95       	lsr	r25
 120:	87 95       	ror	r24
 122:	96 95       	lsr	r25
 124:	87 95       	ror	r24
		motor1 = adc1;
		adc2 = ReadADC(5)/5;//*200)*1024;
		motor2 = adc2;
		USART_send('>');
		_delay_ms(3);
		USART_send(motor1);_delay_ms(3);
 126:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
 12a:	8f ed       	ldi	r24, 0xDF	; 223
 12c:	9e e2       	ldi	r25, 0x2E	; 46
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x48>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x4e>
 134:	00 00       	nop
		} else {
			laser = 0;
		}
		adc1 = ReadADC(4)/5;//)*200)*1024;
		motor1 = adc1;
		adc2 = ReadADC(5)/5;//*200)*1024;
 136:	98 01       	movw	r18, r16
 138:	ad ec       	ldi	r26, 0xCD	; 205
 13a:	bc ec       	ldi	r27, 0xCC	; 204
 13c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <__umulhisi3>
 140:	96 95       	lsr	r25
 142:	87 95       	ror	r24
 144:	96 95       	lsr	r25
 146:	87 95       	ror	r24
		motor2 = adc2;
		USART_send('>');
		_delay_ms(3);
		USART_send(motor1);_delay_ms(3);
		USART_send(motor2);_delay_ms(3);
 148:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
 14c:	8f ed       	ldi	r24, 0xDF	; 223
 14e:	9e e2       	ldi	r25, 0x2E	; 46
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x6a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x70>
 156:	00 00       	nop
		USART_send(90);_delay_ms(3);
 158:	8a e5       	ldi	r24, 0x5A	; 90
 15a:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
 15e:	8f ed       	ldi	r24, 0xDF	; 223
 160:	9e e2       	ldi	r25, 0x2E	; 46
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x7c>
 166:	00 c0       	rjmp	.+0      	; 0x168 <main+0x82>
 168:	00 00       	nop
		USART_send(100);_delay_ms(3);
 16a:	84 e6       	ldi	r24, 0x64	; 100
 16c:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
 170:	8f ed       	ldi	r24, 0xDF	; 223
 172:	9e e2       	ldi	r25, 0x2E	; 46
 174:	01 97       	sbiw	r24, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0x8e>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x94>
 17a:	00 00       	nop
		USART_send(laser);_delay_ms(3);
 17c:	c5 fb       	bst	r28, 5
 17e:	88 27       	eor	r24, r24
 180:	80 f9       	bld	r24, 0
 182:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
 186:	8f ed       	ldi	r24, 0xDF	; 223
 188:	9e e2       	ldi	r25, 0x2E	; 46
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0xa4>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0xaa>
 190:	00 00       	nop
		USART_send('<');_delay_ms(3);
 192:	8c e3       	ldi	r24, 0x3C	; 60
 194:	0e 94 4c 00 	call	0x98	; 0x98 <USART_send>
 198:	8f ed       	ldi	r24, 0xDF	; 223
 19a:	9e e2       	ldi	r25, 0x2E	; 46
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0xb6>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0xbc>
 1a2:	00 00       	nop
 1a4:	9f ef       	ldi	r25, 0xFF	; 255
 1a6:	26 e7       	ldi	r18, 0x76	; 118
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	91 50       	subi	r25, 0x01	; 1
 1ac:	20 40       	sbci	r18, 0x00	; 0
 1ae:	80 40       	sbci	r24, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0xc4>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0xce>
 1b4:	00 00       	nop
 1b6:	9c cf       	rjmp	.-200    	; 0xf0 <main+0xa>

000001b8 <__umulhisi3>:
 1b8:	a2 9f       	mul	r26, r18
 1ba:	b0 01       	movw	r22, r0
 1bc:	b3 9f       	mul	r27, r19
 1be:	c0 01       	movw	r24, r0
 1c0:	a3 9f       	mul	r26, r19
 1c2:	70 0d       	add	r23, r0
 1c4:	81 1d       	adc	r24, r1
 1c6:	11 24       	eor	r1, r1
 1c8:	91 1d       	adc	r25, r1
 1ca:	b2 9f       	mul	r27, r18
 1cc:	70 0d       	add	r23, r0
 1ce:	81 1d       	adc	r24, r1
 1d0:	11 24       	eor	r1, r1
 1d2:	91 1d       	adc	r25, r1
 1d4:	08 95       	ret

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
